
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserStatus {
  INACTIVE // Conta criada mas não ativada (sem depósito inicial)
  ACTIVE   // Conta ativada (depósito >= 100 EUR realizado)
  BLOCKED  // Conta bloqueada por admin
}

enum DepositAddressStatus {
  ACTIVE   // Endereço ativo e recebendo depósitos
  INACTIVE // Endereço desativado (admin)
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  SENT_TO_GLOBAL
  FAILED
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  name          String
  emailVerified Boolean    @default(false)
  image         String?
  status        UserStatus @default(INACTIVE) // Inicia INATIVA até depósito de 100 EUR
  activatedAt   DateTime?  // Data de ativação da conta
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Better Auth relations
  sessions Session[]
  accounts Account[]

  // App relations
  depositAddresses DepositAddress[]
  transactions     WalletTransaction[]

  @@map("users")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model DepositAddress {
  id             String                @id @default(uuid())
  userId         String                @unique // 1 endereço por usuário
  polygonAddress String                @unique
  privateKey     String // Encrypted (apenas plataforma tem acesso)
  status         DepositAddressStatus  @default(ACTIVE)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt

  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]

  @@map("deposit_addresses")
}

model WalletTransaction {
  id               String            @id @default(uuid())
  userId           String
  depositAddressId String
  type             TransactionType
  tokenSymbol      String // "USDC", "MATIC", "USDT", etc
  tokenAddress     String? // Contract address (null para MATIC)
  tokenDecimals    Int // 6 para USDC, 18 para MATIC
  amount           Decimal           @db.Decimal(20, 8) // Valor já convertido com decimais
  rawAmount        String // Valor raw da blockchain
  txHash           String            @unique // Hash da transação de depósito
  transferTxHash   String?           @unique // Hash da transferência para global
  status           TransactionStatus @default(PENDING)
  createdAt        DateTime          @default(now())

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  depositAddress DepositAddress @relation(fields: [depositAddressId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}

model GlobalWallet {
  id             String   @id @default(uuid())
  polygonAddress String   @unique
  privateKey     String // Criptografado
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("global_wallets")
}
